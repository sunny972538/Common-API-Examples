/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1_0/commonapi/CalculatorStubDefault.hpp>
#include <assert.h>

namespace v1_0 {
namespace commonapi {

CalculatorStubDefault::CalculatorStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(Calculator::getInterfaceVersion()) {
}

const CommonAPI::Version& CalculatorStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    return interfaceVersion_;
}

CalculatorStubRemoteEvent* CalculatorStubDefault::initStubAdapter(const std::shared_ptr<CalculatorStubAdapter> &_adapter) {
    CommonAPI::Stub<CalculatorStubAdapter, CalculatorStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


void CalculatorStubDefault::add(const std::shared_ptr<CommonAPI::ClientId> _client, double _operand1, double _operand2, addReply_t _reply) {
    double result = 0.0;
    _reply(result);
}

void CalculatorStubDefault::subtarct(const std::shared_ptr<CommonAPI::ClientId> _client, double _operand1, double _operand2, subtarctReply_t _reply) {
    double result = 0.0;
    _reply(result);
}

void CalculatorStubDefault::multiply(const std::shared_ptr<CommonAPI::ClientId> _client, double _operand1, double _operand2, multiplyReply_t _reply) {
    double result = 0.0;
    _reply(result);
}

void CalculatorStubDefault::divide(const std::shared_ptr<CommonAPI::ClientId> _client, double _dividend, double _divisor, divideReply_t _reply) {
    double qoutient = 0.0;
    int64_t remainder = 0;
    _reply(qoutient, remainder);
}

void CalculatorStubDefault::mod(const std::shared_ptr<CommonAPI::ClientId> _client, int64_t _dividend, int64_t _divisor, modReply_t _reply) {
    int64_t remainder = 0;
    _reply(remainder);
}

void CalculatorStubDefault::sqrt(const std::shared_ptr<CommonAPI::ClientId> _client, double _operand, sqrtReply_t _reply) {
    double result = 0.0;
    _reply(result);
}

void CalculatorStubDefault::cubert(const std::shared_ptr<CommonAPI::ClientId> _client, double _operand, cubertReply_t _reply) {
    double result = 0.0;
    _reply(result);
}

void CalculatorStubDefault::expon(const std::shared_ptr<CommonAPI::ClientId> _client, double _base, double _exponent, exponReply_t _reply) {
    double result = 0.0;
    _reply(result);
}




CalculatorStubDefault::RemoteEventHandler::RemoteEventHandler(CalculatorStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace commonapi
} // namespace v1_0
