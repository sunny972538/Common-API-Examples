/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef COMMONAPI_Calculator_STUB_DEFAULT_HPP_
#define COMMONAPI_Calculator_STUB_DEFAULT_HPP_


#include <v1_0/commonapi/CalculatorStub.hpp>
#include <sstream>

namespace v1_0 {
namespace commonapi {

/**
 * Provides a default implementation for CalculatorStubRemoteEvent and
 * CalculatorStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class CalculatorStubDefault
    : public virtual CalculatorStub {
public:
    CalculatorStubDefault();

    CalculatorStubRemoteEvent* initStubAdapter(const std::shared_ptr<CalculatorStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);


    virtual void add(const std::shared_ptr<CommonAPI::ClientId> _client, double _operand1, double _operand2, addReply_t _reply);
    virtual void subtarct(const std::shared_ptr<CommonAPI::ClientId> _client, double _operand1, double _operand2, subtarctReply_t _reply);
    virtual void multiply(const std::shared_ptr<CommonAPI::ClientId> _client, double _operand1, double _operand2, multiplyReply_t _reply);
    virtual void divide(const std::shared_ptr<CommonAPI::ClientId> _client, double _dividend, double _divisor, divideReply_t _reply);
    virtual void mod(const std::shared_ptr<CommonAPI::ClientId> _client, int64_t _dividend, int64_t _divisor, modReply_t _reply);
    virtual void sqrt(const std::shared_ptr<CommonAPI::ClientId> _client, double _operand, sqrtReply_t _reply);
    virtual void cubert(const std::shared_ptr<CommonAPI::ClientId> _client, double _operand, cubertReply_t _reply);
    virtual void expon(const std::shared_ptr<CommonAPI::ClientId> _client, double _base, double _exponent, exponReply_t _reply);



protected:
    class RemoteEventHandler: public virtual CalculatorStubRemoteEvent {
    public:
        RemoteEventHandler(CalculatorStubDefault *_defaultStub);


    private:
        CalculatorStubDefault *defaultStub_;
    };
private:
    CalculatorStubDefault::RemoteEventHandler remoteEventHandler_;


    CommonAPI::Version interfaceVersion_;
};

} // namespace commonapi
} // namespace v1_0

#endif // COMMONAPI_Calculator_STUB_DEFAULT
