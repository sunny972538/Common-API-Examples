/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef COMMONAPI_Calculator_PROXY_HPP_
#define COMMONAPI_Calculator_PROXY_HPP_

#include <v1_0/commonapi/CalculatorProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1_0 {
namespace commonapi {

template <typename ... _AttributeExtensions>
class CalculatorProxy
    : virtual public Calculator, 
      virtual public CalculatorProxyBase,
      public _AttributeExtensions... {
public:
    CalculatorProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~CalculatorProxy();

    typedef Calculator InterfaceType;




    /**
     * Calls add with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void add(const double &_operand1, const double &_operand2, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls add with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> addAsync(const double &_operand1, const double &_operand2, AddAsyncCallback _callback, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls subtarct with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void subtarct(const double &_operand1, const double &_operand2, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls subtarct with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> subtarctAsync(const double &_operand1, const double &_operand2, SubtarctAsyncCallback _callback, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls multiply with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void multiply(const double &_operand1, const double &_operand2, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls multiply with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> multiplyAsync(const double &_operand1, const double &_operand2, MultiplyAsyncCallback _callback, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls divide with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void divide(const double &_dividend, const double &_divisor, CommonAPI::CallStatus &_internalCallStatus, double &_qoutient, int64_t &_remainder, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls divide with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> divideAsync(const double &_dividend, const double &_divisor, DivideAsyncCallback _callback, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls mod with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void mod(const int64_t &_dividend, const int64_t &_divisor, CommonAPI::CallStatus &_internalCallStatus, int64_t &_remainder, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls mod with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> modAsync(const int64_t &_dividend, const int64_t &_divisor, ModAsyncCallback _callback, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls sqrt with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void sqrt(const double &_operand, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls sqrt with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> sqrtAsync(const double &_operand, SqrtAsyncCallback _callback, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls cubert with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void cubert(const double &_operand, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls cubert with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> cubertAsync(const double &_operand, CubertAsyncCallback _callback, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls expon with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void expon(const double &_base, const double &_exponent, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls expon with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> exponAsync(const double &_base, const double &_exponent, ExponAsyncCallback _callback, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<CalculatorProxyBase> delegate_;
};

typedef CalculatorProxy<> CalculatorProxyDefault;


//
// CalculatorProxy Implementation
//
template <typename ... _AttributeExtensions>
CalculatorProxy<_AttributeExtensions...>::CalculatorProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<CalculatorProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<CalculatorProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
CalculatorProxy<_AttributeExtensions...>::~CalculatorProxy() {
}

template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::add(const double &_operand1, const double &_operand2, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info) {
    delegate_->add(_operand1, _operand2, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::addAsync(const double &_operand1, const double &_operand2, AddAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->addAsync(_operand1, _operand2, _callback, _info);
}
template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::subtarct(const double &_operand1, const double &_operand2, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info) {
    delegate_->subtarct(_operand1, _operand2, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::subtarctAsync(const double &_operand1, const double &_operand2, SubtarctAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->subtarctAsync(_operand1, _operand2, _callback, _info);
}
template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::multiply(const double &_operand1, const double &_operand2, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info) {
    delegate_->multiply(_operand1, _operand2, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::multiplyAsync(const double &_operand1, const double &_operand2, MultiplyAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->multiplyAsync(_operand1, _operand2, _callback, _info);
}
template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::divide(const double &_dividend, const double &_divisor, CommonAPI::CallStatus &_internalCallStatus, double &_qoutient, int64_t &_remainder, const CommonAPI::CallInfo *_info) {
    delegate_->divide(_dividend, _divisor, _internalCallStatus, _qoutient, _remainder, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::divideAsync(const double &_dividend, const double &_divisor, DivideAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->divideAsync(_dividend, _divisor, _callback, _info);
}
template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::mod(const int64_t &_dividend, const int64_t &_divisor, CommonAPI::CallStatus &_internalCallStatus, int64_t &_remainder, const CommonAPI::CallInfo *_info) {
    delegate_->mod(_dividend, _divisor, _internalCallStatus, _remainder, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::modAsync(const int64_t &_dividend, const int64_t &_divisor, ModAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->modAsync(_dividend, _divisor, _callback, _info);
}
template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::sqrt(const double &_operand, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info) {
    delegate_->sqrt(_operand, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::sqrtAsync(const double &_operand, SqrtAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->sqrtAsync(_operand, _callback, _info);
}
template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::cubert(const double &_operand, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info) {
    delegate_->cubert(_operand, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::cubertAsync(const double &_operand, CubertAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->cubertAsync(_operand, _callback, _info);
}
template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::expon(const double &_base, const double &_exponent, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info) {
    delegate_->expon(_base, _exponent, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::exponAsync(const double &_base, const double &_exponent, ExponAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->exponAsync(_base, _exponent, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &CalculatorProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool CalculatorProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool CalculatorProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& CalculatorProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& CalculatorProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace commonapi
} // namespace v1_0


#endif // COMMONAPI_Calculator_PROXY_HPP_
