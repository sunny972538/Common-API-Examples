/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef COMMONAPI_Calculator_DBUS_STUB_ADAPTER_HPP_
#define COMMONAPI_Calculator_DBUS_STUB_ADAPTER_HPP_

#include <v1_0/commonapi/CalculatorStub.hpp>
#include "v1_0/commonapi/CalculatorDBusDeployment.hpp"        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1_0 {
namespace commonapi {

typedef CommonAPI::DBus::DBusStubAdapterHelper<CalculatorStub> CalculatorDBusStubAdapterHelper;

class CalculatorDBusStubAdapterInternal
    : public virtual CalculatorStubAdapter,
      public CalculatorDBusStubAdapterHelper
{
public:
    CalculatorDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~CalculatorDBusStubAdapterInternal();

    virtual  bool hasFreedesktopProperties();




    const CalculatorDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::commonapi::CalculatorStub,
        CommonAPI::Version
        > getCalculatorInterfaceVersionStubDispatcher;




static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::commonapi::CalculatorStub,
    std::tuple<double, double>,
    std::tuple<double>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > addStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::commonapi::CalculatorStub,
    std::tuple<double, double>,
    std::tuple<double>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > subtarctStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::commonapi::CalculatorStub,
    std::tuple<double, double>,
    std::tuple<double>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > multiplyStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::commonapi::CalculatorStub,
    std::tuple<double, double>,
    std::tuple<double, int64_t>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > divideStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::commonapi::CalculatorStub,
    std::tuple<int64_t, int64_t>,
    std::tuple<int64_t>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > modStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::commonapi::CalculatorStub,
    std::tuple<double>,
    std::tuple<double>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > sqrtStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::commonapi::CalculatorStub,
    std::tuple<double>,
    std::tuple<double>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > cubertStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::commonapi::CalculatorStub,
    std::tuple<double, double>,
    std::tuple<double>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > exponStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    CalculatorDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class CalculatorDBusStubAdapter
    : public CalculatorDBusStubAdapterInternal,
      public std::enable_shared_from_this<CalculatorDBusStubAdapter> {
public:
    CalculatorDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          CalculatorDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace commonapi
} // namespace v1_0

#endif // COMMONAPI_Calculator_DBUS_STUB_ADAPTER_HPP_
