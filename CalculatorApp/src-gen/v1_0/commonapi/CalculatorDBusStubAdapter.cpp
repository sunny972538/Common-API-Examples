/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1_0/commonapi/Calculator.hpp>
#include <v1_0/commonapi/CalculatorDBusStubAdapter.hpp>

namespace v1_0 {
namespace commonapi {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createCalculatorDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<CalculatorDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerCalculatorDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	Calculator::getInterface(), &createCalculatorDBusStubAdapter);
}

CalculatorDBusStubAdapterInternal::~CalculatorDBusStubAdapterInternal() {
    deactivateManagedInstances();
    CalculatorDBusStubAdapterHelper::deinit();
}

void CalculatorDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* CalculatorDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"add\">\n"
            "<arg name=\"_operand1\" type=\"d\" direction=\"in\" />\n"
            "<arg name=\"_operand2\" type=\"d\" direction=\"in\" />\n"
            "<arg name=\"_result\" type=\"d\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"subtarct\">\n"
            "<arg name=\"_operand1\" type=\"d\" direction=\"in\" />\n"
            "<arg name=\"_operand2\" type=\"d\" direction=\"in\" />\n"
            "<arg name=\"_result\" type=\"d\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"multiply\">\n"
            "<arg name=\"_operand1\" type=\"d\" direction=\"in\" />\n"
            "<arg name=\"_operand2\" type=\"d\" direction=\"in\" />\n"
            "<arg name=\"_result\" type=\"d\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"divide\">\n"
            "<arg name=\"_dividend\" type=\"d\" direction=\"in\" />\n"
            "<arg name=\"_divisor\" type=\"d\" direction=\"in\" />\n"
            "<arg name=\"_qoutient\" type=\"d\" direction=\"out\" />\n"
            "<arg name=\"_remainder\" type=\"x\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"mod\">\n"
            "<arg name=\"_dividend\" type=\"x\" direction=\"in\" />\n"
            "<arg name=\"_divisor\" type=\"x\" direction=\"in\" />\n"
            "<arg name=\"_remainder\" type=\"x\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"sqrt\">\n"
            "<arg name=\"_operand\" type=\"d\" direction=\"in\" />\n"
            "<arg name=\"_result\" type=\"d\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"cubert\">\n"
            "<arg name=\"_operand\" type=\"d\" direction=\"in\" />\n"
            "<arg name=\"_result\" type=\"d\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"expon\">\n"
            "<arg name=\"_base\" type=\"d\" direction=\"in\" />\n"
            "<arg name=\"_exponent\" type=\"d\" direction=\"in\" />\n"
            "<arg name=\"_result\" type=\"d\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::commonapi::CalculatorStub,
        CommonAPI::Version
        > CalculatorDBusStubAdapterInternal::getCalculatorInterfaceVersionStubDispatcher(&CalculatorStub::getInterfaceVersion, "uu");




CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::commonapi::CalculatorStub,
    std::tuple<double, double>,
    std::tuple<double>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CalculatorDBusStubAdapterInternal::addStubDispatcher(
    &CalculatorStub::add, "d",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::commonapi::CalculatorStub,
    std::tuple<double, double>,
    std::tuple<double>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CalculatorDBusStubAdapterInternal::subtarctStubDispatcher(
    &CalculatorStub::subtarct, "d",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::commonapi::CalculatorStub,
    std::tuple<double, double>,
    std::tuple<double>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CalculatorDBusStubAdapterInternal::multiplyStubDispatcher(
    &CalculatorStub::multiply, "d",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::commonapi::CalculatorStub,
    std::tuple<double, double>,
    std::tuple<double, int64_t>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > CalculatorDBusStubAdapterInternal::divideStubDispatcher(
    &CalculatorStub::divide, "dx",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::commonapi::CalculatorStub,
    std::tuple<int64_t, int64_t>,
    std::tuple<int64_t>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CalculatorDBusStubAdapterInternal::modStubDispatcher(
    &CalculatorStub::mod, "x",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::commonapi::CalculatorStub,
    std::tuple<double>,
    std::tuple<double>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CalculatorDBusStubAdapterInternal::sqrtStubDispatcher(
    &CalculatorStub::sqrt, "d",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::commonapi::CalculatorStub,
    std::tuple<double>,
    std::tuple<double>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CalculatorDBusStubAdapterInternal::cubertStubDispatcher(
    &CalculatorStub::cubert, "d",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::commonapi::CalculatorStub,
    std::tuple<double, double>,
    std::tuple<double>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CalculatorDBusStubAdapterInternal::exponStubDispatcher(
    &CalculatorStub::expon, "d",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));





const CalculatorDBusStubAdapterHelper::StubDispatcherTable& CalculatorDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& CalculatorDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

CalculatorDBusStubAdapterInternal::CalculatorDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      CalculatorDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<CalculatorStub>(_stub), false),
      stubDispatcherTable_({
            { { "add", "dd" }, &commonapi::CalculatorDBusStubAdapterInternal::addStubDispatcher },
            { { "subtarct", "dd" }, &commonapi::CalculatorDBusStubAdapterInternal::subtarctStubDispatcher },
            { { "multiply", "dd" }, &commonapi::CalculatorDBusStubAdapterInternal::multiplyStubDispatcher },
            { { "divide", "dd" }, &commonapi::CalculatorDBusStubAdapterInternal::divideStubDispatcher },
            { { "mod", "xx" }, &commonapi::CalculatorDBusStubAdapterInternal::modStubDispatcher },
            { { "sqrt", "d" }, &commonapi::CalculatorDBusStubAdapterInternal::sqrtStubDispatcher },
            { { "cubert", "d" }, &commonapi::CalculatorDBusStubAdapterInternal::cubertStubDispatcher },
            { { "expon", "dd" }, &commonapi::CalculatorDBusStubAdapterInternal::exponStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &commonapi::CalculatorDBusStubAdapterInternal::getCalculatorInterfaceVersionStubDispatcher });
}

 bool CalculatorDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace commonapi
} // namespace v1_0
