/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1_0/commonapi/CalculatorDBusProxy.hpp>

namespace v1_0 {
namespace commonapi {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createCalculatorDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<CalculatorDBusProxy>(_address, _connection);
}

INITIALIZER(registerCalculatorDBusProxy) {
	CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		Calculator::getInterface(),
		&createCalculatorDBusProxy);
}

CalculatorDBusProxy::CalculatorDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
{
}



        void CalculatorDBusProxy::add(const double &_operand1, const double &_operand2, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_operand1(_operand1, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_operand2(_operand2, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::DBus::DBusProxyHelper<
                CommonAPI::DBus::DBusSerializableArguments<
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >,
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >
                >,
                CommonAPI::DBus::DBusSerializableArguments<
                    CommonAPI::Deployable<double,CommonAPI::EmptyDeployment>
                >
            >::callMethodWithReply(
            *this,
            "add",
            "dd",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            deploy_operand1, deploy_operand2,
            _internalCallStatus,
            deploy_result);
            _result = deploy_result.getValue();
        }
        std::future<CommonAPI::CallStatus> CalculatorDBusProxy::addAsync(const double &_operand1, const double &_operand2, AddAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_operand1(_operand1, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_operand2(_operand2, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            return CommonAPI::DBus::DBusProxyHelper<
                CommonAPI::DBus::DBusSerializableArguments<
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >,
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >
                >,
                CommonAPI::DBus::DBusSerializableArguments<
                    CommonAPI::Deployable<double,CommonAPI::EmptyDeployment>
                >
            >::callMethodAsync(
            *this,
            "add",
            "dd",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            deploy_operand1, deploy_operand2,
            [_callback] (CommonAPI::CallStatus _status, CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> _result) {
            	_callback(_status, _result.getValue());
            },
            std::make_tuple(deploy_result));
        }
        void CalculatorDBusProxy::subtarct(const double &_operand1, const double &_operand2, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_operand1(_operand1, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_operand2(_operand2, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::DBus::DBusProxyHelper<
                CommonAPI::DBus::DBusSerializableArguments<
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >,
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >
                >,
                CommonAPI::DBus::DBusSerializableArguments<
                    CommonAPI::Deployable<double,CommonAPI::EmptyDeployment>
                >
            >::callMethodWithReply(
            *this,
            "subtarct",
            "dd",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            deploy_operand1, deploy_operand2,
            _internalCallStatus,
            deploy_result);
            _result = deploy_result.getValue();
        }
        std::future<CommonAPI::CallStatus> CalculatorDBusProxy::subtarctAsync(const double &_operand1, const double &_operand2, SubtarctAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_operand1(_operand1, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_operand2(_operand2, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            return CommonAPI::DBus::DBusProxyHelper<
                CommonAPI::DBus::DBusSerializableArguments<
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >,
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >
                >,
                CommonAPI::DBus::DBusSerializableArguments<
                    CommonAPI::Deployable<double,CommonAPI::EmptyDeployment>
                >
            >::callMethodAsync(
            *this,
            "subtarct",
            "dd",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            deploy_operand1, deploy_operand2,
            [_callback] (CommonAPI::CallStatus _status, CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> _result) {
            	_callback(_status, _result.getValue());
            },
            std::make_tuple(deploy_result));
        }
        void CalculatorDBusProxy::multiply(const double &_operand1, const double &_operand2, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_operand1(_operand1, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_operand2(_operand2, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::DBus::DBusProxyHelper<
                CommonAPI::DBus::DBusSerializableArguments<
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >,
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >
                >,
                CommonAPI::DBus::DBusSerializableArguments<
                    CommonAPI::Deployable<double,CommonAPI::EmptyDeployment>
                >
            >::callMethodWithReply(
            *this,
            "multiply",
            "dd",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            deploy_operand1, deploy_operand2,
            _internalCallStatus,
            deploy_result);
            _result = deploy_result.getValue();
        }
        std::future<CommonAPI::CallStatus> CalculatorDBusProxy::multiplyAsync(const double &_operand1, const double &_operand2, MultiplyAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_operand1(_operand1, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_operand2(_operand2, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            return CommonAPI::DBus::DBusProxyHelper<
                CommonAPI::DBus::DBusSerializableArguments<
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >,
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >
                >,
                CommonAPI::DBus::DBusSerializableArguments<
                    CommonAPI::Deployable<double,CommonAPI::EmptyDeployment>
                >
            >::callMethodAsync(
            *this,
            "multiply",
            "dd",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            deploy_operand1, deploy_operand2,
            [_callback] (CommonAPI::CallStatus _status, CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> _result) {
            	_callback(_status, _result.getValue());
            },
            std::make_tuple(deploy_result));
        }
        void CalculatorDBusProxy::divide(const double &_dividend, const double &_divisor, CommonAPI::CallStatus &_internalCallStatus, double &_qoutient, int64_t &_remainder, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_dividend(_dividend, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_divisor(_divisor, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_qoutient(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_remainder(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::DBus::DBusProxyHelper<
                CommonAPI::DBus::DBusSerializableArguments<
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >,
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >
                >,
                CommonAPI::DBus::DBusSerializableArguments<
                    CommonAPI::Deployable<double,CommonAPI::EmptyDeployment>,
                    CommonAPI::Deployable<int64_t,CommonAPI::EmptyDeployment>
                >
            >::callMethodWithReply(
            *this,
            "divide",
            "dd",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            deploy_dividend, deploy_divisor,
            _internalCallStatus,
            deploy_qoutient, deploy_remainder);
            _qoutient = deploy_qoutient.getValue();
            _remainder = deploy_remainder.getValue();
        }
        std::future<CommonAPI::CallStatus> CalculatorDBusProxy::divideAsync(const double &_dividend, const double &_divisor, DivideAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_dividend(_dividend, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_divisor(_divisor, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_qoutient(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_remainder(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            return CommonAPI::DBus::DBusProxyHelper<
                CommonAPI::DBus::DBusSerializableArguments<
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >,
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >
                >,
                CommonAPI::DBus::DBusSerializableArguments<
                    CommonAPI::Deployable<double,CommonAPI::EmptyDeployment>,
                    CommonAPI::Deployable<int64_t,CommonAPI::EmptyDeployment>
                >
            >::callMethodAsync(
            *this,
            "divide",
            "dd",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            deploy_dividend, deploy_divisor,
            [_callback] (CommonAPI::CallStatus _status, CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> _qoutient, CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> _remainder) {
            	_callback(_status, _qoutient.getValue(), _remainder.getValue());
            },
            std::make_tuple(deploy_qoutient, deploy_remainder));
        }
        void CalculatorDBusProxy::mod(const int64_t &_dividend, const int64_t &_divisor, CommonAPI::CallStatus &_internalCallStatus, int64_t &_remainder, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_dividend(_dividend, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_divisor(_divisor, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_remainder(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::DBus::DBusProxyHelper<
                CommonAPI::DBus::DBusSerializableArguments<
                CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment >,
                CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment >
                >,
                CommonAPI::DBus::DBusSerializableArguments<
                    CommonAPI::Deployable<int64_t,CommonAPI::EmptyDeployment>
                >
            >::callMethodWithReply(
            *this,
            "mod",
            "xx",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            deploy_dividend, deploy_divisor,
            _internalCallStatus,
            deploy_remainder);
            _remainder = deploy_remainder.getValue();
        }
        std::future<CommonAPI::CallStatus> CalculatorDBusProxy::modAsync(const int64_t &_dividend, const int64_t &_divisor, ModAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_dividend(_dividend, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_divisor(_divisor, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_remainder(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            return CommonAPI::DBus::DBusProxyHelper<
                CommonAPI::DBus::DBusSerializableArguments<
                CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment >,
                CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment >
                >,
                CommonAPI::DBus::DBusSerializableArguments<
                    CommonAPI::Deployable<int64_t,CommonAPI::EmptyDeployment>
                >
            >::callMethodAsync(
            *this,
            "mod",
            "xx",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            deploy_dividend, deploy_divisor,
            [_callback] (CommonAPI::CallStatus _status, CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> _remainder) {
            	_callback(_status, _remainder.getValue());
            },
            std::make_tuple(deploy_remainder));
        }
        void CalculatorDBusProxy::sqrt(const double &_operand, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_operand(_operand, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::DBus::DBusProxyHelper<
                CommonAPI::DBus::DBusSerializableArguments<
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >
                >,
                CommonAPI::DBus::DBusSerializableArguments<
                    CommonAPI::Deployable<double,CommonAPI::EmptyDeployment>
                >
            >::callMethodWithReply(
            *this,
            "sqrt",
            "d",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            deploy_operand,
            _internalCallStatus,
            deploy_result);
            _result = deploy_result.getValue();
        }
        std::future<CommonAPI::CallStatus> CalculatorDBusProxy::sqrtAsync(const double &_operand, SqrtAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_operand(_operand, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            return CommonAPI::DBus::DBusProxyHelper<
                CommonAPI::DBus::DBusSerializableArguments<
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >
                >,
                CommonAPI::DBus::DBusSerializableArguments<
                    CommonAPI::Deployable<double,CommonAPI::EmptyDeployment>
                >
            >::callMethodAsync(
            *this,
            "sqrt",
            "d",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            deploy_operand,
            [_callback] (CommonAPI::CallStatus _status, CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> _result) {
            	_callback(_status, _result.getValue());
            },
            std::make_tuple(deploy_result));
        }
        void CalculatorDBusProxy::cubert(const double &_operand, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_operand(_operand, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::DBus::DBusProxyHelper<
                CommonAPI::DBus::DBusSerializableArguments<
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >
                >,
                CommonAPI::DBus::DBusSerializableArguments<
                    CommonAPI::Deployable<double,CommonAPI::EmptyDeployment>
                >
            >::callMethodWithReply(
            *this,
            "cubert",
            "d",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            deploy_operand,
            _internalCallStatus,
            deploy_result);
            _result = deploy_result.getValue();
        }
        std::future<CommonAPI::CallStatus> CalculatorDBusProxy::cubertAsync(const double &_operand, CubertAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_operand(_operand, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            return CommonAPI::DBus::DBusProxyHelper<
                CommonAPI::DBus::DBusSerializableArguments<
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >
                >,
                CommonAPI::DBus::DBusSerializableArguments<
                    CommonAPI::Deployable<double,CommonAPI::EmptyDeployment>
                >
            >::callMethodAsync(
            *this,
            "cubert",
            "d",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            deploy_operand,
            [_callback] (CommonAPI::CallStatus _status, CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> _result) {
            	_callback(_status, _result.getValue());
            },
            std::make_tuple(deploy_result));
        }
        void CalculatorDBusProxy::expon(const double &_base, const double &_exponent, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_base(_base, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_exponent(_exponent, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::DBus::DBusProxyHelper<
                CommonAPI::DBus::DBusSerializableArguments<
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >,
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >
                >,
                CommonAPI::DBus::DBusSerializableArguments<
                    CommonAPI::Deployable<double,CommonAPI::EmptyDeployment>
                >
            >::callMethodWithReply(
            *this,
            "expon",
            "dd",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            deploy_base, deploy_exponent,
            _internalCallStatus,
            deploy_result);
            _result = deploy_result.getValue();
        }
        std::future<CommonAPI::CallStatus> CalculatorDBusProxy::exponAsync(const double &_base, const double &_exponent, ExponAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_base(_base, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_exponent(_exponent, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            return CommonAPI::DBus::DBusProxyHelper<
                CommonAPI::DBus::DBusSerializableArguments<
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >,
                CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >
                >,
                CommonAPI::DBus::DBusSerializableArguments<
                    CommonAPI::Deployable<double,CommonAPI::EmptyDeployment>
                >
            >::callMethodAsync(
            *this,
            "expon",
            "dd",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            deploy_base, deploy_exponent,
            [_callback] (CommonAPI::CallStatus _status, CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> _result) {
            	_callback(_status, _result.getValue());
            },
            std::make_tuple(deploy_result));
        }


        void CalculatorDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
            ownVersionMajor = 1;
            ownVersionMinor = 0;
        }

        } // namespace commonapi
        } // namespace v1_0
