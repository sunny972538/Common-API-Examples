/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef COMMONAPI_Calculator_DBUS_PROXY_HPP_
#define COMMONAPI_Calculator_DBUS_PROXY_HPP_

#include <v1_0/commonapi/CalculatorProxyBase.hpp>
#include "v1_0/commonapi/CalculatorDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1_0 {
namespace commonapi {

class CalculatorDBusProxy
    : virtual public CalculatorProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    CalculatorDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~CalculatorDBusProxy() { }



    virtual void add(const double &_operand1, const double &_operand2, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> addAsync(const double &_operand1, const double &_operand2, AddAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void subtarct(const double &_operand1, const double &_operand2, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> subtarctAsync(const double &_operand1, const double &_operand2, SubtarctAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void multiply(const double &_operand1, const double &_operand2, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> multiplyAsync(const double &_operand1, const double &_operand2, MultiplyAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void divide(const double &_dividend, const double &_divisor, CommonAPI::CallStatus &_internalCallStatus, double &_qoutient, int64_t &_remainder, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> divideAsync(const double &_dividend, const double &_divisor, DivideAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void mod(const int64_t &_dividend, const int64_t &_divisor, CommonAPI::CallStatus &_internalCallStatus, int64_t &_remainder, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> modAsync(const int64_t &_dividend, const int64_t &_divisor, ModAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void sqrt(const double &_operand, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> sqrtAsync(const double &_operand, SqrtAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void cubert(const double &_operand, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> cubertAsync(const double &_operand, CubertAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void expon(const double &_base, const double &_exponent, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> exponAsync(const double &_base, const double &_exponent, ExponAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
    


};

} // namespace commonapi
} // namespace v1_0

#endif // COMMONAPI_Calculator_DBUS_PROXY_HPP_

